schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "todo"
  """
  delete_todo(
    """filter the rows which have to be deleted"""
    where: todo_bool_exp!
  ): todo_mutation_response

  """
  delete single row from the table: "todo"
  """
  delete_todo_by_pk(id: uuid!): todo

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: uuid!): users

  """
  insert data into the table: "todo"
  """
  insert_todo(
    """the rows to be inserted"""
    objects: [todo_insert_input!]!

    """on conflict condition"""
    on_conflict: todo_on_conflict
  ): todo_mutation_response

  """
  insert a single row into the table: "todo"
  """
  insert_todo_one(
    """the row to be inserted"""
    object: todo_insert_input!

    """on conflict condition"""
    on_conflict: todo_on_conflict
  ): todo

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "todo"
  """
  update_todo(
    """sets the columns of the filtered rows to the given values"""
    _set: todo_set_input

    """filter the rows which have to be updated"""
    where: todo_bool_exp!
  ): todo_mutation_response

  """
  update single row of the table: "todo"
  """
  update_todo_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: todo_set_input
    pk_columns: todo_pk_columns_input!
  ): todo

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""An object with globally unique ID"""
interface Node {
  """A globally unique identifier"""
  id: ID!
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type query_root {
  node(
    """A globally unique id"""
    id: ID!
  ): Node

  """
  fetch data from the table: "todo"
  """
  todo_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [todo_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [todo_order_by!]

    """filter the rows returned"""
    where: todo_bool_exp
  ): todoConnection!

  """
  fetch data from the table: "users"
  """
  users_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [users_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): usersConnection!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  node(
    """A globally unique id"""
    id: ID!
  ): Node

  """
  fetch data from the table: "todo"
  """
  todo_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [todo_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [todo_order_by!]

    """filter the rows returned"""
    where: todo_bool_exp
  ): todoConnection!

  """
  fetch data from the table: "users"
  """
  users_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [users_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): usersConnection!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
todos table


columns and relationships of "todo"

"""
type todo implements Node {
  completed: Boolean!
  created_at: timestamptz!
  deleted_at: timestamptz
  description: String
  id: ID!
  title: String!
  updated_at: timestamptz

  """An object relationship"""
  user: users
  user_id: uuid
}

"""
aggregated selection of "todo"
"""
type todo_aggregate {
  aggregate: todo_aggregate_fields
  nodes: [todo!]!
}

"""
aggregate fields of "todo"
"""
type todo_aggregate_fields {
  count(columns: [todo_select_column!], distinct: Boolean): Int!
  max: todo_max_fields
  min: todo_min_fields
}

"""
order by aggregate values of table "todo"
"""
input todo_aggregate_order_by {
  count: order_by
  max: todo_max_order_by
  min: todo_min_order_by
}

"""
input type for inserting array relation for remote table "todo"
"""
input todo_arr_rel_insert_input {
  data: [todo_insert_input!]!

  """on conflict condition"""
  on_conflict: todo_on_conflict
}

"""
Boolean expression to filter rows from the table "todo". All fields are combined with a logical 'AND'.
"""
input todo_bool_exp {
  _and: [todo_bool_exp!]
  _not: todo_bool_exp
  _or: [todo_bool_exp!]
  completed: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  description: String_comparison_exp
  id: uuid_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "todo"
"""
enum todo_constraint {
  """unique or primary key constraint"""
  todo_pkey
}

"""
input type for inserting data into table "todo"
"""
input todo_insert_input {
  completed: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  id: uuid
  title: String
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type todo_max_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  id: uuid
  title: String
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "todo"
"""
input todo_max_order_by {
  created_at: order_by
  deleted_at: order_by
  description: order_by
  id: order_by
  title: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type todo_min_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  id: uuid
  title: String
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "todo"
"""
input todo_min_order_by {
  created_at: order_by
  deleted_at: order_by
  description: order_by
  id: order_by
  title: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "todo"
"""
type todo_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [todo!]!
}

"""
on conflict condition type for table "todo"
"""
input todo_on_conflict {
  constraint: todo_constraint!
  update_columns: [todo_update_column!]! = []
  where: todo_bool_exp
}

"""Ordering options when selecting data from "todo"."""
input todo_order_by {
  completed: order_by
  created_at: order_by
  deleted_at: order_by
  description: order_by
  id: order_by
  title: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: todo"""
input todo_pk_columns_input {
  id: uuid!
}

"""
select columns of table "todo"
"""
enum todo_select_column {
  """column name"""
  completed

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "todo"
"""
input todo_set_input {
  completed: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  id: uuid
  title: String
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "todo"
"""
enum todo_update_column {
  """column name"""
  completed

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
A Relay connection object on "todo"
"""
type todoConnection {
  edges: [todoEdge!]!
  pageInfo: PageInfo!
}

type todoEdge {
  cursor: String!
  node: todo!
}

"""
columns and relationships of "users"
"""
type users implements Node {
  auth0_id: String!
  email: String
  id: ID!
  name: String!
  password: String
  picture: String

  """An array relationship"""
  todos(
    """distinct select on columns"""
    distinct_on: [todo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_order_by!]

    """filter the rows returned"""
    where: todo_bool_exp
  ): [todo!]!

  """An aggregate relationship"""
  todos_aggregate(
    """distinct select on columns"""
    distinct_on: [todo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_order_by!]

    """filter the rows returned"""
    where: todo_bool_exp
  ): todo_aggregate!

  """An array relationship connection"""
  todos_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [todo_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [todo_order_by!]

    """filter the rows returned"""
    where: todo_bool_exp
  ): todoConnection!
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  auth0_id: String_comparison_exp
  email: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  password: String_comparison_exp
  picture: String_comparison_exp
  todos: todo_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_auth0_id_key

  """unique or primary key constraint"""
  users_email_key

  """unique or primary key constraint"""
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  auth0_id: String
  email: String
  id: uuid
  name: String
  password: String
  picture: String
  todos: todo_arr_rel_insert_input
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """on conflict condition"""
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  auth0_id: order_by
  email: order_by
  id: order_by
  name: order_by
  password: order_by
  picture: order_by
  todos_aggregate: todo_aggregate_order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  auth0_id

  """column name"""
  email

  """column name"""
  id

  """column name"""
  name

  """column name"""
  password

  """column name"""
  picture
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  auth0_id: String
  email: String
  id: uuid
  name: String
  password: String
  picture: String
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  auth0_id

  """column name"""
  email

  """column name"""
  id

  """column name"""
  name

  """column name"""
  password

  """column name"""
  picture
}

"""
A Relay connection object on "users"
"""
type usersConnection {
  edges: [usersEdge!]!
  pageInfo: PageInfo!
}

type usersEdge {
  cursor: String!
  node: users!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

